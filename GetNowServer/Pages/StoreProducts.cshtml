@page
@model GetNowServer.Pages.StoreProductsModel
<style type="text/css">
    .dx-lookup-search .dx-texteditor-input {
        margin: 0;
        padding-top: 4px;
        padding-bottom: 4px;
        min-height: 30px;
    }

    .dx-lookup-search-wrapper {
        padding: 8px 8px 4px;
    }

    .dx-list .dx-empty-message, .dx-list-item-content {
        padding: 6px;
    }

    .dx-lookup-popup-search .dx-list {
        height: 100%;
        height: calc(100% - 44px);
    }

    .dx-popup-bottom.dx-toolbar {
        padding: 4px 16px 12px;
        overflow: visible;
    }

    .dx-popup-cancel .dx-button-content {
        padding: 5px 8px 6px;
    }

    .dx-popup-bottom .dx-button {
        min-width: 80px;
    }

    .label1 {
        width: 100px;
    }

    .dx-field-value:not(.dx-switch):not(.dx-checkbox):not(.dx-button) {
        width: calc(100% - 100px);
    }

    .dx-treelist-rowsview .dx-selection.dx-row:not(.dx-row-focused):hover:not(.dx-row-lines) > td,
    .dx-treelist-rowsview .dx-selection.dx-row:not(.dx-row-focused):not(.dx-row-lines) > td {
        background-color: transparent;
        color: #337ab7;
        border: none;
        font-weight: bold;
    }

    .dx-treelist-rowsview .dx-selection .dx-treelist-collapsed span::before,
    .dx-treelist-rowsview .dx-selection .dx-treelist-expanded span::before {
        color: #337ab7;
    }

    .dx-list:not(.dx-list-select-decorator-enabled) .dx-list-item.dx-list-item-selected {
        background-color: #337ab7;
        color: #fff;
    }
    .dx-list:not(.dx-list-select-decorator-enabled) .dx-list-item.dx-state-focused.dx-list-item-selected {
        background-color: #337ab7;
        color: #fff;
    }

    .myButton {
        font-size: 1.1rem;
        padding: 0 2px;
    }

    #myButtonLinkAdd, #myButtonLinkEdit, #myButtonLinkDelete {
        color: lightgray;
        cursor: pointer;
    }

    #myButtonLinkAdd:hover, #myButtonLinkEdit:hover, #myButtonLinkDelete:hover,
    #myButtonLinkAdd:active, #myButtonLinkEdit:active, #myButtonLinkDelete:active {
        color: #3987cc;
    }
    a.top-right-button {
        background-color: #337ab7;
        color: white;
        border-radius: 4px;
        font-size: 1rem;
        padding: 6px;
        cursor: pointer;
        text-decoration: none;
    }
    a.top-right-button:hover, a.top-right-button:active {
        background-color: #3987cc;
        text-decoration: none;
    }
    /*.list-container {
        min-height: 100px;
        height: auto;
        position: absolute;
        top: 0;
        bottom: 0;
    }*/
    #popup-content {
        height: 100%;
    }
    .product-list {
        position: absolute;
        top: 0;
        bottom: 0;
    }
    .product {
        width: 100% !important;
        height: 50px;
        vertical-align: top;
        line-height: 50px;
        font-size: 13px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .product > img, .product > .add-product {
        height: 100%;
        width: 50px;
        margin-right: 8px;
    }
    .product > .add-product {
        float: left;
        font-size: 32px;
        font-weight: 600;
        text-align: center;
        line-height: 44px;
    }
/*    .product > div {
        padding-left: 10px;
        vertical-align: top;
        line-height: 64px;
        font-size: 15px;
        white-space: nowrap;
        text-overflow: ellipsis;
        flex-grow: 1;
        flex-shrink: 1;
    }*/
</style>
<h3 class="content-block mb-3">Store Products</h3>
<script>
    selectedMenuItemId = "#ni-storeproductgroups"
    var myDataSource = {};
    var storeGroupId = 1;
    var storeGroupName;
    var storeProductGroupId;
    var storeProductGroupName;
</script>
<div id="editDivContainer" style="display: none">
    <div id="editDiv" class="pl-3">
        <a id="myButtonLinkAdd" title="Add child"><i class="dx-icon dx-icon-add myButton" onclick="addData()"></i></a>
        <a id="myButtonLinkEdit" title="Edit"><i class="dx-icon dx-icon-edit myButton" onclick="editData()"></i></a>
        <a id="myButtonLinkDelete" title="Delete"><i class="dx-icon dx-icon-remove myButton" onclick="deleteData()"></i></a>
    </div>
</div>

<div class="container">
    <div class="row">
        <div id="treeListContainer" class="col-4">
            <div class="dx-field">
                <div class="label1 dx-field-label">Store Group:</div>
                <div class="dx-field-value">
                    @(Html.DevExtreme().Lookup()
                        .ID("lookup1")
                        //.Width("50%")
                        .DataSource(new JS("getStoreGroups()"))
                        .DropDownOptions(p => p.ShowTitle(false).CloseOnOutsideClick(true))
                        .ValueExpr("Id")
                        .DisplayExpr("Name")
                        .Value(1)
                        .OnValueChanged("lookup_valueChanged")
                        .ShowCancelButton(false)
                        .SearchExpr(new string[] { "Name", "NameSearch" })
                        .OnInitialized("onInitializedLookup")
                    )
                </div>
            </div>

            @(Html.DevExtreme().TreeList<GetNowServer.Models.StoreProductGroupView>()
                //.Width("50%")
                .ID("treeList1")
                .ShowBorders(false)
                .ShowRowLines(false)
                .ShowColumnHeaders(false)
                .ExpandNodesOnFiltering(false)
                //.HeaderFilter(headerFilter => headerFilter.Visible(true))
                .DataSource(ds => ds.Mvc()
                    .Controller("StoreProductGroups")
                    .LoadAction("Get")
                    .InsertAction("Post")
                    .UpdateAction("Put")
                    .DeleteAction("Delete")
                    .Key("Id")
                    .OnLoaded("treeDataLoaded")
                )
                //.RowDragging(rd => rd
                //    .AllowDropInsideItem(true)
                //    //.AllowReordering(true)
                //    .OnDragChange("onDragChange")
                //    .OnReorder("onReorder")
                //    .ShowDragIcons(true)
                //)
                //.RootValue(0)
                .ParentIdExpr("Parent")
                //.RemoteOperations(o => o.Filtering(true).Grouping(true).Sorting(true))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Name).Alignment(HorizontalAlignment.Left)
                        .CellTemplate(@<text>
                            @(await Html.PartialAsync("_ProductGroupCellTemplate"))
                        </text>);
                    columns.AddFor(m => m.Id).Visible(false);
                    columns.AddFor(m => m.Parent).Visible(false);
                    columns.AddFor(m => m.StoreGroup).Visible(false);
                    //columns.AddFor(m => m.Id).Width("20%");
                })
                .Editing(e => e
                    //.AllowAdding(true)
                    //.AllowUpdating(true)
                    //.AllowDeleting(true)
                    .Mode(GridEditMode.Popup)
                    .Popup(p => p
                        .Title("Store Product Group")
                        .ShowTitle(true)
                        .Width(500)
                        .Height(300)
                        .Animation(a => a.Show(ac => ac.Duration(0)))
                        .OnShown("onShowEditPopup")
                    )
                    .Form(f => f.ID("editForm1").Items(items =>
                    {
                        items.AddGroup()
                            .ColCount(1)
                            .ColSpan(2)
                            .Items(groupItems =>
                            {
                                groupItems.AddSimpleFor(m => m.Parent)
                                    .Editor(e => e
                                        .Lookup()
                                        .DropDownOptions(p => p.ShowTitle(false).CloseOnOutsideClick(true))
                                        .ValueExpr("Id")
                                        .DisplayExpr("Name")
                                        .ShowCancelButton(false)
                                        .SearchExpr(new string[] { "Name", "NameSearch" })
                                    );
                                groupItems.AddSimpleFor(m => m.Id);
                                groupItems.AddSimpleFor(m => m.Name).Editor(e => e.TextBox().ID("nameTextBox1"));
                            });
                    }))
                )
                .OnInitialized("onInitialized")
                .OnInitNewRow("onInitNewRow")
                .OnEditingStart("onEditingStart")
                .Selection(s => s.Mode(SelectionMode.Single))
                .OnSelectionChanged("onSelectionChanged")
                .OnContentReady("onContentReady")
            )
        </div>
        <div id="productsdiv" class="col-8">
            Hello
        </div>
    </div>
</div>

<div id="popupDiv"></div>

<script>
    var storeGroupLookup;
    var treeList;
    var optionsData;
    var storeProductGroups = [];
    var units = [];
    var brands = [];
    var origins = [];
    var sizes = [];
    $(function () {
        getUnits();
        getBrands();
        getOrigins();
        getSizes();
    });
    function getUnits() {
        $.ajax({
            url: '@Url.Action("Get", "Units")',
            method: "GET",
            dataType: "json",
            success: function (result) {
                console.log("Got units: " + result);
                units = result;
                addNameSearchColumn(units);
            }
        });
    }
    function getBrands() {
        $.ajax({
            url: '@Url.Action("Get", "Brands")',
            method: "GET",
            dataType: "json",
            success: function (result) {
                brands = result;
                addNameSearchColumn(brands);
            }
        });
    }
    function getOrigins() {
        $.ajax({
            url: '@Url.Action("Get", "Origins")',
            method: "GET",
            dataType: "json",
            success: function (result) {
                origins = result;
                addNameSearchColumn(origins);
            }
        });
    }
    function getSizes() {
        $.ajax({
            url: '@Url.Action("Get", "Sizes")',
            method: "GET",
            dataType: "json",
            success: function (result) {
                sizes = result;
                addNameSearchColumn(sizes);
            }
        });
    }

    function getStoreGroups() {
        return getDataSource(myDataSource, "StoreGroups", '@Url.Action("Get", "StoreGroups")');
    }
    function onInitializedLookup(e) {
        console.log("onInitializedLookup");
        storeGroupLookup = e.component;
        console.log(storeGroupLookup);
    }
    function lookup_valueChanged(e) {
        console.log("lookup_valueChanged");
        if (storeGroupId != e.value) {
            console.log("Store Group selected: " + e.value);
            storeGroupId = e.value;
            updateTreeFilter().reload();
        }
    }
    function updateTreeFilter() {
        var dataSource = $("#treeList1").dxTreeList("getDataSource");
        var filter = [['StoreGroup', '=', storeGroupId]];
        dataSource.filter(filter);
        return dataSource;
    }
    function setPopupIdVisible(e, visible) {
        const formItemConfig = e.component.columnOption('Id') || {}
        formItemConfig.visible = visible;
        e.component.columnOption('Id', 'formItem', formItemConfig);
    }
    function treeDataLoaded(result) {
        console.log("treeDataLoaded storeGroupId = " + storeGroupId);
        storeProductGroups = result.filter(d => d.StoreGroup == storeGroupId);
        addNameSearchColumn(storeProductGroups);
        console.log("treeDataLoaded " + storeProductGroups.length);
        updateTreeFilter();
    }
    function onInitialized(e) {
        treeList = e.component;
    }
    function onInitNewRow(e) {
        console.log("onInitNewRow " + storeProductGroups[0]["Name"]);
        e.component.option("editing.popup.title", "Create New Store Product Group");
        e.data.StoreGroup = storeGroupId;
        e.component.columnOption('Parent', 'lookup.dataSource', storeProductGroups);
        setPopupIdVisible(e, false);
    }
    function onEditingStart(e) {
        console.log("onEditingStart " + storeProductGroups[0]["Name"]);
        e.component.option("editing.popup.title", "Update Store Product Group: " + e.data.Name);
        var parents = storeProductGroups.filter(d => d.Id != e.data.Id);
        e.component.columnOption('Parent', 'lookup.dataSource', parents);
        setPopupIdVisible(e, true);
    }
    function onShowEditPopup(e) {
        console.log("onShowEditPopup");
        $("#nameTextBox1").find("input").focus();
    }
    function displayProducts(productGroupId) {
        //alert("display products for group: " + productGroupId)
        storeGroupName = storeGroupLookup.option("selectedItem").Name;
        console.log("Store Group: " + storeGroupName);

        $.ajax({
            url: '@Url.Action("StoreProducts", "ViewComponent")',
            method: "GET",
            dataType: "html",
            data: { storeGroup: storeGroupId, storeProductGroup: productGroupId },
            success: function (result) {
                //console.log(result);
                $("#productsdiv").html(result);
            },
            error: function (xhr, status, error) {
                $("#productsdiv").html("No products found.");
            }
        });
    }
    function onSelectionChanged(e) {
        var selectedData = e.component.getSelectedRowsData("all");
        if (selectedData.length > 0) {
            storeProductGroupId = selectedData[0].Id;
            storeProductGroupName = selectedData[0].Name;
            displayProducts(storeProductGroupId);
            showEditDiv();
            treeList.expandRow(storeProductGroupId);
        } else {
            storeProductGroupId = 0;
        }
    }
    function showEditDiv() {
        var targetDivId = 'productGroupCellDiv' + storeProductGroupId;
        var targetDiv = document.getElementById(targetDivId);
        if (targetDiv == undefined)
            return;

        var editDiv = document.getElementById('editDiv1');
        if (editDiv == undefined) {
            editDiv = document.getElementById('editDiv');
            editDiv = editDiv.cloneNode(true);
            editDiv.id = 'editDiv1';
        }
        if (!targetDiv.contains(editDiv))
            targetDiv.appendChild(editDiv);
    }
    function onContentReady(e) {
        console.log("onContentReady");
        if (storeProductGroupId != undefined)
            showEditDiv();
    }
    function addData() {
        if (storeProductGroupId != undefined) {
            treeList.addRow(storeProductGroupId);
        }
    }
    function editData() {
        if (storeProductGroupId != undefined) {
            var rowIndex = treeList.getRowIndexByKey(storeProductGroupId)
            if (rowIndex != undefined)
                treeList.editRow(rowIndex);
        }
    }
    function deleteData() {
        if (storeProductGroupId != undefined) {
            var rowIndex = treeList.getRowIndexByKey(storeProductGroupId)
            if (rowIndex != undefined)
                treeList.deleteRow(rowIndex);
        }
    }
</script>