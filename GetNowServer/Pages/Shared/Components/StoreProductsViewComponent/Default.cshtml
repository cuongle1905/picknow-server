@*@model (int storeGroup, int storeProductGroup)*@
@model List<GetNowServer.Models.StoreProductView>
@{
    var count = Model.Count;
    var columns = 4;
    var rows = count / columns;
    if (count % columns > 0)
        rows++;
}
@*<p class="h4">Hello <strong>world</strong></p>*@
<div id="products-content">
    <div class="container">
        @for (int row = 0; row < rows; row++)
        {
            <div class="row">
                @for (int column = 0; column < columns; column++)
                {
                    int i = row * columns + column;
                    if (i >= count)
                        break;

                    var item = Model[i];
                    <div class="col-3 item_product_main pb-2">
                        <div><a id="itemImgLink@(item.Id)" name="itemImgLink@(item.Id)" title="Click to change image" onclick="showChangeIconPopover(@(item.Id))"><img id="itemImg@(item.Id)" class="image_thumb" src="~/data_images/@(item.ImageFile??"photo.png")" /></a></div>
                        <div class="small">@(item.Name)</div>
                        <div class="small"><strong>@(Convert.ToDecimal(item.Price).ToString("n0"))đ</strong></div>
                    </div>
                }
            </div>
        }
    </div>
</div>
<div id="changeIconPopoverContainer">
    <div id="changeIconFileUploader"></div>
    <div id="removeIconButton"></div>
</div>
<script>
    $(function () {
        createDxFileUploader('@Url.Action("ProductImage", "Upload")');
    });
</script>



@*<script>
        $(function () {
            var storeGroup = '@Model.storeGroup'
            var storeProductGroup = '@Model.storeProductGroup'
            alert(storeProductGroup)
            $.ajax({
                type: "GET",
                url: "@Url.Action("Get", "StoreProductViews")",
                data: { storeGroup: storeGroup, storeProductGroup: storeProductGroup },
                success: function (result) {
                    //do something with result here
                    alert(result.length);
                }
            });
        });
        function displayProducts(products) {

        }
    </script>*@

@*@(Html.DevExtreme().DataGrid<GetNowServer.Models.NColumn>()
        .DataSource(ds => ds.Mvc()
            .Controller("StoreProductViews")
            .LoadAction("GetNColumns")
            .LoadParams(new { columns = 4, storeGroup = Model.storeGroup, storeProductGroup = Model.storeProductGroup })
            .Key("Id")
        )
        .RemoteOperations(false)
        .ShowColumnHeaders(false)
        .Columns(columns => {

            columns.AddFor(m => m.Col1)
                .CellTemplate(@<text>
                    @(await Html.PartialAsync("_ProductCellTemplate"))
                </text>);

            columns.AddFor(m => m.Col2)
                .CellTemplate(@<text>
                    @(await Html.PartialAsync("_ProductCellTemplate"))
                </text>);

            columns.AddFor(m => m.Col3)
                .CellTemplate(@<text>
                    @(await Html.PartialAsync("_ProductCellTemplate"))
                </text>);

            columns.AddFor(m => m.Col4)
                .CellTemplate(@<text>
                    @(await Html.PartialAsync("_ProductCellTemplate"))
                </text>);
        })
    )*@
