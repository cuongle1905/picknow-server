@*@model (int storeGroup, int storeProductGroup)*@
@model List<GetNowServer.Models.StoreProductView>
@{
    var count = Model.Count;
    var columns = 4;
    var rows = count / columns;
    if (count % columns > 0)
        rows++;
}
@*<p class="h4">Hello <strong>world</strong></p>*@
<div class="d-flex">
    <div class="ml-auto">
        <div id="add-product-button"></div>
    </div>
</div>
<div id="products-content">
    <div class="container">
        @for (int row = 0; row < rows; row++)
        {
            <div class="row">
                @for (int column = 0; column < columns; column++)
                {
                    int i = row * columns + column;
                    if (i >= count)
                        break;

                    var item = Model[i];
                    <div class="col-3 item_product_main pb-2">
                        <div><a id="itemImgLink@(item.Id)" name="itemImgLink@(item.Id)" title="Click to change image" onclick="showChangeIconPopover(@(item.Id))"><img id="itemImg@(item.Id)" class="image_thumb" src="~/data_images/@(item.ImageFile??"photo.png")" /></a></div>
                        <div class="small">@(item.Name)</div>
                        <div class="small"><strong>@(Convert.ToDecimal(item.Price).ToString("n0"))đ</strong></div>
                    </div>
                }
            </div>
        }
    </div>
</div>
<div id="changeIconPopoverContainer">
    <div id="changeIconFileUploader"></div>
    <div id="removeIconButton"></div>
</div>
<script>
    var productForm;
    var searchName;
    var timerId;
    var selectedProductId = 0;
    var selectedProduct;
    $(function () {
        $("#add-product-button").dxButton({
            icon: "add",
            type: "default",
            stylingMode: "contained",
            text: "Add Product",
            onClick: function (e) {
                addProduct();
            }
        });
        createDxFileUploader('@Url.Action("ProductImage", "Upload")');
    });

    function addProduct() {
        $("#popupDiv").dxPopup({
            visible: true,
            title: 'Add Product: ' + storeGroupName + ' > ' + storeProductGroupName,
            minwidth: 600,
            minheight: 600,
            width: "90%",
            position: {
                my: 'center',
                at: 'center',
                of: window
            },
            dragEnabled: true,
            contentTemplate: function (e) {
                var popupContent = $("<div id='popup-content' class='container mh-100'></div>")
                var row = $("<div class='row h-100'></div>")
                popupContent.append(row)
                var leftCol = $("<div class='col-4 pl-0 pr-0' style='background-color: #f8f8f8'><div class='product-list'><div id='divSearchProduct'></div></div></div>")
                row.append(leftCol)
                var rightCol = $("<div class='col-8'></div>")
                row.append(rightCol)

                var formContainer = $("<div id='subForm'></div>");
                productForm = formContainer.dxForm({
                    //formData: product,
                    readOnly: false,
                    showColonAfterLabel: false,
                    labelLocation: "left",
                    //minColWidth: 300,
                    showValidationSummary: true,
                    items: [
                        {
                            itemType: "group",
                            name: "ProductInfo",
                            caption: "New Product Info",
                            colCount: 2,
                            items: [
                                {
                                    dataField: "Name",
                                    label: { text: "Name" },
                                    editorOptions: {
                                        valueChangeEvent: "input",
                                        onValueChanged: function (data) {
                                            console.log("Name changed: " + data.value);
                                            if (data.value.length < 3)
                                                return;

                                            searchName = data.value;
                                            clearTimeout(timerId)
                                            timerId = setTimeout(function () {
                                                if (searchName == data.value) {
                                                    console.log("Search name: " + searchName)
                                                    $.ajax({
                                                        url: '@Url.Action("Get", "ProductViews")',
                                                        method: "GET",
                                                        dataType: "json",
                                                        data: { name: searchName, storeGroupId: storeGroupId },
                                                        success: function (result) {
                                                            console.log(result);
                                                            displayProductSearchResult(result);
                                                        }
                                                    });
                                                }
                                            }, 500);
                                        }
                                    },
                                    validationRules: [{
                                        type: "required",
                                        message: "Product Name is required"
                                    }]
                                },
                                {
                                    label: { text: "Code" },
                                    dataField: "Code",
                                    //label: { text: "Group" },
                                    //editorType: "dxLookup",
                                    //editorOptions: {}
                                },
                                {
                                    dataField: "Unit",
                                    editorType: "dxAutocomplete",
                                    label: { text: "Unit" },
                                    editorOptions: {
                                        minSearchLength: 1,
                                        dataSource: units,
                                        valueExpr: "Name",
                                        searchExpr: "NameSearch"
                                    },
                                    validationRules: [{
                                        type: "required",
                                        message: "Unit is required"
                                    }]
                                },
                                {
                                    dataField: "Brand",
                                    editorType: "dxAutocomplete",
                                    label: { text: "Brand" },
                                    editorOptions: {
                                        minSearchLength: 1,
                                        dataSource: brands,
                                        valueExpr: "Name",
                                        searchExpr: "NameSearch"
                                    }
                                },
                                {
                                    dataField: "Origin",
                                    editorType: "dxAutocomplete",
                                    label: { text: "Origin" },
                                    editorOptions: {
                                        minSearchLength: 1,
                                        dataSource: origins,
                                        valueExpr: "Name",
                                        searchExpr: "NameSearch"
                                    },
                                    value: origins[0]["Name"]
                                },
                                {
                                    dataField: "Size",
                                    editorType: "dxAutocomplete",
                                    label: { text: "Size" },
                                    editorOptions: {
                                        minSearchLength: 1,
                                        dataSource: sizes,
                                        valueExpr: "Name",
                                        searchExpr: "NameSearch"
                                    }
                                }
                            ]
                        }, {
                            itemType: "group",
                            name: "PriceInfo",
                            caption: "Price Info",
                            colCount: 2,
                            items: [
                                {
                                    dataField: "Price",
                                    label: { text: "Price" },
                                    editorType: "dxNumberBox",
                                    editorOptions: {
                                        format: "#,##0 đ"
                                    },
                                    validationRules: [{
                                        type: "required",
                                        message: "Price is required"
                                    }]
                                },
                                {
                                    itemType: "empty"
                                }
                            ]
                        }, {
                            itemType: "button",
                            horizontalAlignment: "left",
                            colSpan: 2,
                            buttonOptions: {
                                icon: "save",
                                text: "Save",
                                type: "default",
                                stylingMode: "contained",
                                //useSubmitBehavior: true,
                                onClick: function () {
                                    var name = productForm.getEditor("Name").option("value");
                                    var code = productForm.getEditor("Code").option("value");
                                    var unit = productForm.getEditor("Unit").option("value");
                                    var brand = productForm.getEditor("Brand").option("value");
                                    var origin = productForm.getEditor("Origin").option("value");
                                    var size = productForm.getEditor("Size").option("value");
                                    var price = productForm.getEditor("Price").option("value");
                                    alert(code);

                                    //mainForm.getEditor("mainFormSubmit").option("useSubmitBehavior", false);
                                    //$("#popupForm").submit();
                                }
                            },
                        }
                    ]
                }).dxForm("instance");

                rightCol.append(formContainer)
                e.append(popupContent)

                var originEditor = productForm.getEditor("Origin");
                originEditor.option("value", origins[0]["Name"]);

                //$("#popupForm").on("submit", function (e) {
                //    alert('#popupForm submit pressed');
                //});

                displayProductSearchResult([]);
            }
        });
    }

    function displayProductSearchResult(products) {
        var newProduct = []
        newProduct["Id"] = 0;
        newProduct["Name"] = "New Product";
        products.splice(0, 0, newProduct);

        var list = $("#divSearchProduct").dxList({
            dataSource: products,
            selectedItemKeys: [selectedProductId],
            selectionMode: "single",
            height: "100%",
            keyExpr: "Id",
            itemTemplate: function (data, index) {
                var result = $("<div>").addClass("product");
                result.text(data.Name);
                if (index == 0) {
                    var divAdd = $("<div>").addClass("add-product");
                    divAdd.text("+");
                    divAdd.prependTo(result);
                } else {
                    var imageFile = data.ImageFile;
                    if (imageFile == undefined)
                        imageFile = "photo.png";

                    $("<img>").attr("src", "/data_images/" + imageFile).prependTo(result);
                }
                return result;
            },
            onSelectionChanged: function (e) {
                selectedProduct = e.addedItems[0];
                selectedProductId = selectedProduct.Id;
                displaySelectedProduct();
            }
        }).dxList("instance");

        list.option("selectedItemKeys", [selectedProductId]);
    }

    function displaySelectedProduct() {
        if (selectedProductId > 0 && selectedProduct != undefined) {
            productForm.itemOption("ProductInfo", "caption", "Existing Product: " + selectedProduct["Name"]);
            productForm.getEditor("Name").option("value", selectedProduct["Name"]);
            productForm.getEditor("Code").option("value", selectedProduct["Code"]);
            productForm.getEditor("Unit").option("value", getName(selectedProduct["Unit"], units));
            productForm.getEditor("Brand").option("value", getName(selectedProduct["Brand"], brands));
            productForm.getEditor("Origin").option("value", getName(selectedProduct["Origin"], origins));
            productForm.getEditor("Size").option("value", getName(selectedProduct["Size"], sizes));
        } else {
            productForm.itemOption("ProductInfo", "caption", "New Product")
        }
    }
</script>
