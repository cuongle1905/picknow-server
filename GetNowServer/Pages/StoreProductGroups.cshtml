@page
@model GetNowServer.Pages.StoreProductGroupsModel
<style type="text/css">
    .dx-lookup-search .dx-texteditor-input {
        margin: 0;
        padding-top: 4px;
        padding-bottom: 4px;
        min-height: 30px;
    }
    .dx-lookup-search-wrapper {
        padding: 8px 8px 4px;
    }
    .dx-list .dx-empty-message, .dx-list-item-content {
        padding: 6px;
    }
    .dx-lookup-popup-search .dx-list {
        height: 100%;
        height: calc(100% - 44px);
    }
    .dx-popup-bottom.dx-toolbar {
        padding: 4px 16px 12px;
        overflow: visible;
    }
    .dx-popup-cancel .dx-button-content {
        padding: 5px 8px 6px;
    }
    .dx-popup-bottom .dx-button {
        min-width: 80px;
    }
    .label1 {
        width: 100px;
    }
    .dx-field-value:not(.dx-switch):not(.dx-checkbox):not(.dx-button) {
        width: calc(100% - 100px);
    }
    .mybutton {
        color: #337ab7;
        font-size: 17px;
        cursor: pointer;
        padding: 0 4px;
    }
    .dx-treelist-rowsview .dx-selection.dx-row:not(.dx-row-focused):hover:not(.dx-row-lines) > td,
    .dx-treelist-rowsview .dx-selection.dx-row:not(.dx-row-focused):not(.dx-row-lines) > td {
        background-color: transparent;
        color: #337ab7;
        border: none;
        font-weight: bold;
    }
</style>
<h2 class="content-block">Store Product Groups</h2>
<script>
    selectedMenuItemId = "#ni-storeproductgroups"
    var myDataSource = {};
    var storeGroupId = 1;
    var selectedGroupId;
</script>
<div id="editDivContainer" style="display: none">
    <div id="editDiv" class="pl-3">
        <a title="Add child"><i class="dx-icon dx-icon-add mybutton" onclick="addData()"></i></a>
        <a title="Edit"><i class="dx-icon dx-icon-edit mybutton" onclick="editData()"></i></a>
        <a title="Delete"><i class="dx-icon dx-icon-remove mybutton" onclick="deleteData()"></i></a>
    </div>
</div>

<div class="container">
    <div class="row">
        <div id="treeListContainer" class="col-4">
            <div class="dx-field">
                <div class="label1 dx-field-label">Store Group:</div>
                <div class="dx-field-value">
                    @(Html.DevExtreme().Lookup()
                        .ID("lookup1")
                        //.Width("50%")
                        .DataSource(new JS("getStoreGroups()"))
                        .DropDownOptions(p => p.ShowTitle(false).CloseOnOutsideClick(true))
                        .ValueExpr("Id")
                        .DisplayExpr("Name")
                        .Value(1)
                        .OnValueChanged("lookup_valueChanged")
                        .ShowCancelButton(false)
                        .SearchExpr(new string[] { "Name", "NameSearch" })
                    )
                </div>
            </div>

            @(Html.DevExtreme().TreeList<GetNowServer.Models.StoreProductGroup>()
                //.Width("50%")
                .ID("treeList1")
                .ShowBorders(false)
                .ShowRowLines(false)
                .ShowColumnHeaders(false)
                //.HeaderFilter(headerFilter => headerFilter.Visible(true))
                .DataSource(ds => ds.Mvc()
                    .Controller("StoreProductGroups")
                    .LoadAction("Get")
                    .InsertAction("Post")
                    .UpdateAction("Put")
                    .DeleteAction("Delete")
                    .Key("Id")
                    .OnLoaded("treeDataLoaded")
                )
                //.RowDragging(rd => rd
                //    .AllowDropInsideItem(true)
                //    //.AllowReordering(true)
                //    .OnDragChange("onDragChange")
                //    .OnReorder("onReorder")
                //    .ShowDragIcons(true)
                //)
                //.RootValue(0)
                .ParentIdExpr("Parent")
                //.RemoteOperations(o => o.Filtering(true).Grouping(true).Sorting(true))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Name).Alignment(HorizontalAlignment.Left)
                        .CellTemplate(@<text>
                            @(await Html.PartialAsync("_ProductGroupCellTemplate"))
                        </text>);
                    columns.AddFor(m => m.Id).Visible(false);
                    columns.AddFor(m => m.Parent).Visible(false);
                    columns.AddFor(m => m.StoreGroup).Visible(false);
                    //columns.AddFor(m => m.Id).Width("20%");
                })
                .Editing(e => e
                    //.AllowAdding(true)
                    //.AllowUpdating(true)
                    //.AllowDeleting(true)
                    .Mode(GridEditMode.Popup)
                    .Popup(p => p
                        .Title("Store Product Group")
                        .ShowTitle(true)
                        .Width(500)
                        .Height(300)
                        .Animation(a => a.Show(ac => ac.Duration(0)))
                        .OnShown("onShowEditPopup")
                    )
                    .Form(f => f.ID("editForm1").Items(items =>
                    {
                        items.AddGroup()
                            .ColCount(1)
                            .ColSpan(2)
                            .Items(groupItems =>
                            {
                                groupItems.AddSimpleFor(m => m.Parent)
                                    .Editor(e => e
                                        .Lookup()
                                        .DropDownOptions(p => p.ShowTitle(false).CloseOnOutsideClick(true))
                                        .ValueExpr("Id")
                                        .DisplayExpr("Name")
                                        .ShowCancelButton(false)
                                        .SearchExpr(new string[] { "Name", "NameSearch" })
                                    );
                                groupItems.AddSimpleFor(m => m.Id);
                                groupItems.AddSimpleFor(m => m.Name).Editor(e => e.TextBox().ID("nameTextBox1"));
                            });
                    }))
                )
                .OnInitialized("onInitialized")
                .OnInitNewRow("onInitNewRow")
                .OnEditingStart("onEditingStart")
                .Selection(s => s.Mode(SelectionMode.Single))
                .OnSelectionChanged("onSelectionChanged")
                .OnContentReady("onContentReady")
            )
        </div>
        <div id="productsdiv" class="col-8">
            Hello
        </div>
    </div>
</div>



<script>
    var treeList;
    $(function () {
        $("#add-button").dxButton({
            icon: "add",
            type: "success",
            text: "",
            onClick: function (e) {
                DevExpress.ui.notify("The Add button was clicked");
            }
        });
    });

    var optionsData;
    var storeProductGroups = [];
    function getStoreGroups() {
        return getDataSource(myDataSource, "StoreGroups", '@Url.Action("Get", "StoreGroups")');
    }
    function lookup_valueChanged(e) {
        if (storeGroupId != e.value) {
            console.log("Store Group selected: " + e.value);
            storeGroupId = e.value;
            updateTreeFilter().reload();
        }
    }
    function updateTreeFilter() {
        var dataSource = $("#treeList1").dxTreeList("getDataSource");
        var filter = [['StoreGroup', '=', storeGroupId]];
        dataSource.filter(filter);
        return dataSource;
    }
    function setPopupIdVisible(e, visible) {
        const formItemConfig = e.component.columnOption('Id') || {}
        formItemConfig.visible = visible;
        e.component.columnOption('Id', 'formItem', formItemConfig);
    }
    function treeDataLoaded(result) {
        storeProductGroups = result.filter(d => d.StoreGroup == storeGroupId);
        addNameSearchColumn(storeProductGroups);
        console.log("treeDataLoaded " + storeProductGroups.length);
    }
    function onInitialized(e) {
        treeList = e.component;
    }
    function onInitNewRow(e) {
        console.log("onInitNewRow " + storeProductGroups[0]["Name"]);
        e.component.option("editing.popup.title", "Create New Store Product Group");
        e.data.StoreGroup = storeGroupId;
        e.component.columnOption('Parent', 'lookup.dataSource', storeProductGroups);
        setPopupIdVisible(e, false);
    }
    function onEditingStart(e) {
        console.log("onEditingStart " + storeProductGroups[0]["Name"]);
        e.component.option("editing.popup.title", "Update Store Product Group: " + e.data.Name);
        var parents = storeProductGroups.filter(d => d.Id != e.data.Id);
        e.component.columnOption('Parent', 'lookup.dataSource', parents);
        setPopupIdVisible(e, true);
    }
    function onShowEditPopup(e) {
        console.log("onShowEditPopup");
        $("#nameTextBox1").find("input").focus();
    }
    function displayProducts(productGroupId) {
        //alert("display products for group: " + productGroupId)
        $.ajax({
            url: '@Url.Action("StoreProducts", "ViewComponent")',
            method: "GET",
            dataType: "html",
            data: { storeGroup: storeGroupId, storeProductGroup: productGroupId },
            success: function (result) {
                console.log(result);
                $("#productsdiv").html(result);
            }
        });
    }
    function onSelectionChanged(e) {
        var selectedData = e.component.getSelectedRowsData("all");
        selectedGroupId = selectedData[0].Id;
        showEditDiv();
        displayProducts(selectedGroupId);
        //$("#selected-items-container").text(getEmployeeNames(selectedData));
    }
    function showEditDiv() {
        var targetDivId = 'productGroupCellDiv' + selectedGroupId;
        var targetDiv = document.getElementById(targetDivId);
        var editDiv = document.getElementById('editDiv1');
        if (editDiv == undefined) {
            editDiv = document.getElementById('editDiv');
            editDiv = editDiv.cloneNode(true);
            editDiv.id = 'editDiv1';
        }
        if (!targetDiv.contains(editDiv))
            targetDiv.appendChild(editDiv);
        
        //$('#editDiv').detach().appendTo(targetDivId);
    }
    function onContentReady(e) {
        console.log("onContentReady");
        if (selectedGroupId != undefined)
            showEditDiv();
    }
    function addData() {
        if (selectedGroupId != undefined) {
            treeList.addRow(selectedGroupId);
        }
    }
    function editData() {
        if (selectedGroupId != undefined) {
            var rowIndex = treeList.getRowIndexByKey(selectedGroupId)
            if (rowIndex != undefined)
                treeList.editRow(rowIndex);
        }
    }
    function deleteData() {
        if (selectedGroupId != undefined) {
            var rowIndex = treeList.getRowIndexByKey(selectedGroupId)
            if (rowIndex != undefined)
                treeList.deleteRow(rowIndex);
        }
    }
</script>

@*<script>
        function onDragChange(e) {
            var treeList = e.component,
                visibleRows = treeList.getVisibleRows(),
                sourceNode = treeList.getNodeByKey(e.itemData.Id),
                targetNode = visibleRows[e.toIndex].node;

            while (targetNode && targetNode.data) {
                if (targetNode.data.Id === sourceNode.data.Id) {
                    e.cancel = true;
                    break;
                }
                targetNode = targetNode.parent;
            }
        }

        function onReorder(e) {
            var visibleRows = e.component.getVisibleRows();

            if (e.dropInsideItem) {
                e.itemData.Head_ID = visibleRows[e.toIndex].key;
                console.log("onReorder dropInsideItem " + e.itemData.Id + " -> " + e.itemData.Head_ID)
            } else {
                var sourceData = e.itemData,
                    toIndex = e.fromIndex > e.toIndex ? e.toIndex - 1 : e.toIndex,
                    targetData = toIndex >= 0 ? visibleRows[toIndex].node.data : null;

                if (targetData && e.component.isRowExpanded(targetData.Id)) {
                    sourceData.Head_ID = targetData.Id;
                    targetData = null;
                } else {
                    sourceData.Head_ID = targetData ? targetData.Head_ID : e.component.option('rootValue');
                }
                console.log("onReorder !dropInsideItem " + e.itemData.Id + " -> " + e.itemData.Head_ID)

                var storeProductGroups = getStoreProductGroups()
                var sourceIndex = storeProductGroups.indexOf(sourceData);
                storeProductGroups.splice(sourceIndex, 1);

                var targetIndex = storeProductGroups.indexOf(targetData) + 1;
                storeProductGroups.splice(targetIndex, 0, sourceData);
            }

            e.component.refresh();
        }

        function getTreeList() {
            return $("#treeList").dxTreeList("instance");
        }
    </script>*@